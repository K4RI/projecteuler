# https://projecteuler.net/progress=K4RI (clé ami : 1099140_7f5q1oS3T1P6KfjGJdCWMBWhA6DPMvcI)
from time import time
import os

def isprime(u):
    if u in (0,1):
        return False
    if u==2:
        return True
    for i in ((2,)+tuple(range(3,int(u**0.5)+1,2))):
        if u%i==0:
            return False
    return True

########################################
def solve1(n):
    return sum(tuple(k for k in range(1,n) if (k%3 == 0) or (k%5 == 0)))

assert(solve1(10)==23)
t=time()
print('PB #1 :',solve1(1000), '(' + str(time()-t) + ' sec)')

########################################
def solve2(n):
    t = (1,2)
    while t[len(t)-1]<n:
        t=t + (t[len(t)-1] + t[len(t)-2],)
    return sum(tuple(x for x in t if x%2 == 0))

t=time()
print('PB #2 :',solve2(4000000), '(' + str(time()-t) + ' sec)')

########################################
def solve3(n):
    primmax=0
    for i in ((2,)+tuple(range(3,int(n**0.5)+1,2))):
        if n%i==0:
            if isprime(i):
                primmax=i
    return primmax

assert(solve3(13195)==29)
t=time()
print('PB #3 :',solve3(600851475143), '(' + str(time()-t) + ' sec)')

########################################
def solve4(n):
    N=10**n
    return max(tuple(k*i for k in range (N,N//10,-1) for i in range (k, N) if str(k*i)==(str(k*i)[::-1])))

assert(solve4(2)==9009)
t=time()
print('PB #4 :',solve4(3), '(' + str(time()-t) + ' sec)')

########################################
def solve5(n):
    i=20
    def divbl(dmax, k):
        for d in range(1,dmax+1):
            if k%d!=0:
                return False
        return True
    while not divbl(n,i):
        i+=20
    return i

assert(solve5(10)==2520)
t=time()
print('PB #5 :',solve5(20), '(' + str(time()-t) + ' sec)')
            
########################################
def solve6(n):
    s_carres=n*(n+1)*((2*n)+1)//6
    s_nbres_au_carre=(n*(n+1)//2)**2
    return s_nbres_au_carre-s_carres

assert(solve6(10)==2640)
t=time()
print('PB #6 :',solve6(100), '(' + str(time()-t) + ' sec)')

########################################
def solve7(n):
    k=1
    cpt=1
    while cpt<n:
        k+=2
        cpt+=isprime(k)
    return k

assert(solve7(6)==13)
t=time()
print('PB #7 :',solve7(10001), '(' + str(time()-t) + ' sec)')

########################################
def solve8(n):
    st='7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450'
    def prodn(t):
        p=1
        for k in t:
            p*=int(k)
        return p
    return max(tuple(prodn(st[i:i+n]) for i in range(len(st)-n)))

assert(solve8(4)==5832)
t=time()
print('PB #8 :',solve8(4), '(' + str(time()-t) + ' sec)')

########################################
def solve9(n):
    for c in range(1,n):
        for b in range (1,c):
            a=n-c-b
            if a**2+b**2==c**2:
                return a*b*c

t=time()
print('PB #9 :',solve9(1000), '(' + str(time()-t) + ' sec)')

########################################
def solve10(n):
    return 2+sum(tuple(k for k in range(3,n,2) if isprime(k)))

assert(solve10(10)==17)
t=time()
print('PB #10 :',solve10(2*10**6), '(' + str(time()-t) + ' sec)')

########################################
def reine(M,config):
    if M==0:
        return True
    pos=config[M]
    for i in range(M):
        interdits=(pos,pos-(M-i),pos+(M-i))
        if config[i] in interdits:
            return False
    return reine(M-1,config)

from itertools import permutations
def reines(N):
    perm_ok=()
    for config in list(permutations(range(N))):
        if reine(N-1,config):
            perm_ok=perm_ok+(config,)
    return len(perm_ok), perm_ok
print(reines(4))

########################################
def solve11(M):
    maxi = 0
    for i in range (len(M)): #ici calcule des colonnes  0 à 19 (toutes)
        for j in range (len(M)):
            hor, vert, diagbd, diagbg = 0, 0, 0, 0
            if j<=16:
                hor = M[i][j]*M[i][j+1]*M[i][j+2]*M[i][j+3]
            if i<=16:
                vert = M[i][j]*M[i+1][j]*M[i+2][j]*M[i+3][j]
                if j<=16:
                    diagbd = M[i][j]*M[i+1][j+1]*M[i+2][j+2]*M[i+3][j+3]
                if j>=3:
                    diagbg = M[i][j]*M[i+1][j-1]*M[i+2][j-2]*M[i+3][j-3]
            maxi=max(maxi, hor, vert, diagbd, diagbg)
    return maxi

t=time()
print('PB #11 :',solve11([
[ 8, 2,22,97,38,15, 0,40, 0,75, 4, 5, 7,78,52,12,50,77,91, 8],
[49,49,99,40,17,81,18,57,60,87,17,40,98,43,69,48, 4,56,62, 0],
[81,49,31,73,55,79,14,29,93,71,40,67,53,88,30, 3,49,13,36,65],
[52,70,95,23, 4,60,11,42,69,24,68,56, 1,32,56,71,37, 2,36,91],
[22,31,16,71,51,67,63,89,41,92,36,54,22,40,40,28,66,33,13,80],
[24,47,32,60,99, 3,45, 2,44,75,33,53,78,36,84,20,35,17,12,50],
[32,98,81,28,64,23,67,10,26,38,40,67,59,54,70,66,18,38,64,70],
[67,26,20,68, 2,62,12,20,95,63,94,39,63, 8,40,91,66,49,94,21],
[24,55,58, 5,66,73,99,26,97,17,78,78,96,83,14,88,34,89,63,72],
[21,36,23, 9,75, 0,76,44,20,45,35,14, 0,61,33,97,34,31,33,95],
[78,17,53,28,22,75,31,67,15,94, 3,80, 4,62,16,14, 9,53,56,92],
[16,39, 5,42,96,35,31,47,55,58,88,24, 0,17,54,24,36,29,85,57],
[86,56, 0,48,35,71,89, 7, 5,44,44,37,44,60,21,58,51,54,17,58],
[19,80,81,68, 5,94,47,69,28,73,92,13,86,52,17,77, 4,89,55,40],
[ 4,52, 8,83,97,35,99,16, 7,97,57,32,16,26,26,79,33,27,98,66],
[88,36,68,87,57,62,20,72, 3,46,33,67,46,55,12,32,63,93,53,69],
[ 4,42,16,73,38,25,39,11,24,94,72,18, 8,46,29,32,40,62,76,36],
[20,69,36,41,72,30,23,88,34,62,99,69,82,67,59,85,74, 4,36,16],
[20,73,35,29,78,31,90, 1,74,31,49,71,48,86,81,16,23,57, 5,54],
[ 1,70,54,71,83,51,54,69,16,92,33,48,61,43,52, 1,89,19,67,48]]), '(' + str(time()-t) + ' sec)')

########################################
def solve12(n):
    k=0
    i=0
    while(len([i for i in range(1,k+1) if n%i==0])<n):
        i+=1
        k+=i
    return k

assert(solve12(5)==28)
t=time()
print('PB #12 :',solve12(500), '(' + str(time()-t) + ' sec)')

########################################
def solve13(L):
    return int(str(sum(L))[:10])

t=time()
print('PB #13 :',solve13([37107287533902102798797998220837590246510135740250,46376937677490009712648124896970078050417018260538,74324986199524741059474233309513058123726617309629,91942213363574161572522430563301811072406154908250,23067588207539346171171980310421047513778063246676,89261670696623633820136378418383684178734361726757,28112879812849979408065481931592621691275889832738,44274228917432520321923589422876796487670272189318,47451445736001306439091167216856844588711603153276,70386486105843025439939619828917593665686757934951,62176457141856560629502157223196586755079324193331,64906352462741904929101432445813822663347944758178,92575867718337217661963751590579239728245598838407,58203565325359399008402633568948830189458628227828,80181199384826282014278194139940567587151170094390,35398664372827112653829987240784473053190104293586,86515506006295864861532075273371959191420517255829,71693888707715466499115593487603532921714970056938,54370070576826684624621495650076471787294438377604,53282654108756828443191190634694037855217779295145,36123272525000296071075082563815656710885258350721,45876576172410976447339110607218265236877223636045,17423706905851860660448207621209813287860733969412,81142660418086830619328460811191061556940512689692,51934325451728388641918047049293215058642563049483,62467221648435076201727918039944693004732956340691,15732444386908125794514089057706229429197107928209,55037687525678773091862540744969844508330393682126,18336384825330154686196124348767681297534375946515,80386287592878490201521685554828717201219257766954,78182833757993103614740356856449095527097864797581,16726320100436897842553539920931837441497806860984,48403098129077791799088218795327364475675590848030,87086987551392711854517078544161852424320693150332,59959406895756536782107074926966537676326235447210,69793950679652694742597709739166693763042633987085,41052684708299085211399427365734116182760315001271,65378607361501080857009149939512557028198746004375,35829035317434717326932123578154982629742552737307,94953759765105305946966067683156574377167401875275,88902802571733229619176668713819931811048770190271,25267680276078003013678680992525463401061632866526,36270218540497705585629946580636237993140746255962,24074486908231174977792365466257246923322810917141,91430288197103288597806669760892938638285025333403,34413065578016127815921815005561868836468420090470,23053081172816430487623791969842487255036638784583,11487696932154902810424020138335124462181441773470,63783299490636259666498587618221225225512486764533,67720186971698544312419572409913959008952310058822,95548255300263520781532296796249481641953868218774,76085327132285723110424803456124867697064507995236,37774242535411291684276865538926205024910326572967,23701913275725675285653248258265463092207058596522,29798860272258331913126375147341994889534765745501,18495701454879288984856827726077713721403798879715,38298203783031473527721580348144513491373226651381,34829543829199918180278916522431027392251122869539,40957953066405232632538044100059654939159879593635,29746152185502371307642255121183693803580388584903,41698116222072977186158236678424689157993532961922,62467957194401269043877107275048102390895523597457,23189706772547915061505504953922979530901129967519,86188088225875314529584099251203829009407770775672,11306739708304724483816533873502340845647058077308,82959174767140363198008187129011875491310547126581,97623331044818386269515456334926366572897563400500,42846280183517070527831839425882145521227251250327,55121603546981200581762165212827652751691296897789,32238195734329339946437501907836945765883352399886,75506164965184775180738168837861091527357929701337,62177842752192623401942399639168044983993173312731,32924185707147349566916674687634660915035914677504,99518671430235219628894890102423325116913619626622,73267460800591547471830798392868535206946944540724,76841822524674417161514036427982273348055556214818,97142617910342598647204516893989422179826088076852,87783646182799346313767754307809363333018982642090,10848802521674670883215120185883543223812876952786,71329612474782464538636993009049310363619763878039,62184073572399794223406235393808339651327408011116,66627891981488087797941876876144230030984490851411,60661826293682836764744779239180335110989069790714,85786944089552990653640447425576083659976645795096,66024396409905389607120198219976047599490197230297,64913982680032973156037120041377903785566085089252,16730939319872750275468906903707539413042652315011,94809377245048795150954100921645863754710598436791,78639167021187492431995700641917969777599028300699,15368713711936614952811305876380278410754449733078,40789923115535562561142322423255033685442488917353,44889911501440648020369068063960672322193204149535,41503128880339536053299340368006977710650566631954,81234880673210146739058568557934581403627822703280,82616570773948327592232845941706525094512325230608,22918802058777319719839450180888072429661980811197,77158542502016545090413245809786882778948721859617,72107838435069186155435662884062257473692284509516,20849603980134001723930671666823555245252804609722,53503534226472524250874054075591789781264330331690]), '(' + str(time()-t) + ' sec)')

########################################
def solve14(n):
    def L_chain(k):
        cpt=1
        while k!=1:
            if k%2 == 0:
                k=k//2
            else:
                k=3*k+1
            cpt+=1
        return cpt
    assert(L_chain(13)==10)
    kmax, lmax = 0,0
    for k in range(1,n):
        l=L_chain(k)
        if l>lmax:
            kmax, lmax = k, l
    return kmax

t=time()
print('PB #14 :',solve14(10**6), '(' + str(time()-t) + ' sec)')

########################################
def solve15(n):
    p=1
    for k in range(1,n+1):
        p=p*(n+k)/k
    return int(p)    

assert(solve15(2)==6)
t=time()
print('PB #15 :',solve15(20), '(' + str(time()-t) + ' sec)')

########################################
def solve16(n):
    return sum([int(c) for c in str(2**n)])

assert(solve16(15)==26)
t=time()
print('PB #16 :',solve16(1000), '(' + str(time()-t) + ' sec)')

########################################
def solve17(n):
    def all_kaps(k):
        a = ""
        if k == 1000:
            a += "onethousand"
        if k//100 == 1:
            a += "onehundred"
        if k//100 == 2:
            a += "twohundred"
        if k//100 == 3:
            a += "threehundred"
        if k//100 == 4:
            a += "fourhundred"
        if k//100 == 5:
            a += "fivehundred"
        if k//100 == 6:
            a += "sixhundred"
        if k//100 == 7:
            a += "sevenhundred"
        if k//100 == 8:
            a += "eighthundred"
        if k//100 == 9:
            a += "ninehundred"
        if (k%100 != 0) and (k>=100):
            a += "and"
        if k%100 == 10:
            a += "ten"
        if k%100 == 11:
            a += "eleven"
        if k%100 == 12:
            a += "twelve"
        if k%100 == 13:
            a += "thirteen"
        if k%100 == 14:
            a += "fourteen"
        if k%100 == 15:
            a += "fifteen"
        if k%100 == 16:
            a += "sixteen"
        if k%100 == 17:
            a += "seventeen"
        if k%100 == 18:
            a += "eighteen"
        if k%100 == 19:
            a += "nineteen"
        if (k-(k//100)*100)//10 == 2:
            a += "twenty"
        if (k-(k//100)*100)//10 == 3:
            a += "thirty"
        if (k-(k//100)*100)//10 == 4:
            a += "forty"
        if (k-(k//100)*100)//10 == 5:
            a += "fifty"
        if (k-(k//100)*100)//10 == 6:
            a += "sixty"
        if (k-(k//100)*100)//10 == 7:
            a += "seventy"
        if (k-(k//100)*100)//10 == 8:
            a += "eighty"
        if (k-(k//100)*100)//10 == 9:
            a += "ninety"
        if (k-(k//10)*10) == 1 and (k%100 <= 10 or k%100 >= 20):
            a += "one"
        if (k-(k//10)*10) == 2 and (k%100 <= 10 or k%100 >= 20):
            a += "two"
        if (k-(k//10)*10) == 3 and (k%100 <= 10 or k%100 >= 20):
            a += "three"
        if (k-(k//10)*10) == 4 and (k%100 <= 10 or k%100 >= 20):
            a += "four"
        if (k-(k//10)*10) == 5 and (k%100 <= 10 or k%100 >= 20):
            a += "five"
        if (k-(k//10)*10) == 6 and (k%100 <= 10 or k%100 >= 20):
            a += "six"
        if (k-(k//10)*10) == 7 and (k%100 <= 10 or k%100 >= 20):
            a += "seven"
        if (k-(k//10)*10) == 8 and (k%100 <= 10 or k%100 >= 20):
            a += "eight"
        if (k-(k//10)*10) == 9 and (k%100 <= 10 or k%100 >= 20):
            a += "nine"
        return a
    return sum([len(all_kaps(k)) for k in range(1,n+1)])

assert(solve17(5)==19)
t=time()
print('PB #17 :',solve17(1000), '(' + str(time()-t) + ' sec)')

########################################
def solve18(triangl):
    le = len(triangl)
    def dec2bin(n):
        if n==0:
            return le*'0'
        liste=""
        while n>0:
            liste = str(n%2) + liste
            n=n//2
        while len(liste)<le:
            liste = '0' + liste
        return liste
    
    def sumtriangle(n):
        S = 0
        col = 0
        for k in range(le):
            col += int((dec2bin(n) [k]))
            S += triangl[k][col]
        return S
    return max([sumtriangle(x) for x in range(2**(le-1)-1)])

assert(solve18([
[3],
[7,4],
[2,4,6],
[8,5,9,3]])==23)


t=time()
print('PB #18 :',solve18([
[75],
[95,64],
[17,47,82],
[18,35,87,10],
[20, 4,82,47,65],
[19, 1,23,75, 3,34],
[88, 2,77,73, 7,63,67],
[99,65, 4,28, 6,16,70,92],
[41,41,26,56,83,40,80,70,33],
[41,48,72,33,47,32,37,16,94,29],
[53,71,44,65,25,43,91,52,97,51,14],
[70,11,33,28,77,73,17,78,39,68,17,57],
[91,71,52,38,17,14,91,43,58,50,27,29,48],
[63,66, 4,68,89,53,67,30,73,16,69,87,40,31],
[ 4,62,98,27,23, 9,70,98,73,93,38,53,60, 4,23]]), '(' + str(time()-t) + ' sec)')

########################################
def solve19():
    jour, mois, annee, sem = 1,1,1900,1
    cpt=0
    while annee<=2000:
        if (sem, jour) == (7,1) and annee>=1901:
            cpt+=1
        jour+=1
        if mois in [1,3,5,7,8,10,12] and jour == 32:
            mois += 1
            jour = 1
        if mois in [4,6,9,11] and jour == 31:
            mois += 1
            jour = 1
        if mois == 2:
            if ((annee%4==0) or (annee%400==0)) and jour==30:
                mois += 1
                jour = 1
            if ((annee%4 != 0) or (annee%100==0 and annee%400!=0)) and jour== 29:
                mois += 1
                jour = 1
        if mois == 13:
            mois = 1
            annee+=1
        sem+=1
        if sem==8:
            sem=1
    return cpt

t=time()
print('PB #19 :',solve19(), '(' + str(time()-t) + ' sec)')

########################################
def solve20(n):
    fact = 1
    for k in range(1,n+1):
        fact = fact * k
    return sum([int(x) for x in str(fact)])

assert(solve20(10)==27)
t=time()
print('PB #20 :',solve20(100), '(' + str(time()-t) + ' sec)')

########################################
def solve21(n):
    L=[sum([i for i in range(1,k) if k%i==0]) for k in range (n+1)]
    s=0
    for i in range(n):
        if L[i]<=n and L[i]!=i:
            if L[L[i]]==i:
                s+=i
                print(i)
    return s

t=time()
print('PB #21 :',solve21(10000), '(' + str(time()-t) + ' sec)')

########################################
def solve22(file):
    os.getcwd()
    fichier = open(file, "r")
    texte=fichier.read()
    noms = ()
    k=1
    mot=''
    while k<len(texte):
        if texte[k]=='"':
            noms=noms+(mot,)
            mot=''
            k+=3
        else:
            mot+=texte[k]
            k+=1
    l_noms=sorted(noms)
    def score(st):
        return sum(tuple(ord(x)-64 for x in st))
    assert(score('COLIN')==53)
    return sum(tuple((k+1)*score(l_noms[k]) for k in range(len(l_noms)))) 

t=time()
print('PB #22 :',solve22("C:/Users/karia/Documents/TRAVAIL/info/p022_names.txt"), '(' + str(time()-t) + ' sec)')

########################################
def solve23(n):
    ab = [k for k in range(n+1) if sum([i for i in range(1,k) if k%i==0])>k]
    ok = list(set([x+y for x in ab for y in ab if x+y<n+1]))
    return n*(n+1)//2 - sum(ok)

t=time()
print('PB #23 :',solve23(28123), '(' + str(time()-t) + ' sec)')

########################################
def solve24(L,n):
    def fact(k):
        if k==0:
            return 1
        return k*fact(k-1)
    n-=1
    L.sort()
    s=''
    nn=len(L)
    for i in range(nn-1,0,-1):
        quot,rest = n//fact(i), n%fact(i)
        n=rest
        s+=str(L[quot])
        del L[quot]
    return s+str(L[0])

t=time()
print('PB #24 :',solve24([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 10**6), '(' + str(time()-t) + ' sec)')

########################################
def solve25(n):
    i, j, cpt = 1, 1,2
    while j<10**(n-1):
        i,j, cpt = j, i+j, cpt+1
    return cpt

t=time()
print('PB #25 :',solve25(1000), '(' + str(time()-t) + ' sec)')

########################################
def solve55(n):
    def Lychrel(k):
        nb=k+int(str(k)[::-1])
        for k in range(50):
            if str(nb)==(str(nb)[::-1]):
                return False
            nb+=int(str(nb)[::-1])
        return True
    return len(tuple(i for i in range(n) if Lychrel(i)))

t=time()
print('PB #55 :',solve55(10000), '(' + str(time()-t) + ' sec)')